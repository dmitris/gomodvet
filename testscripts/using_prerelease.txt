# enable modules.
env GO111MODULE=on

# cd to our module and build 
# to make sure we have a valid setup and up-to-date 'go.mod'.
cd $WORK/gopath/src/example.com/hello
go build

# gomodvet passes if we disable -prerelease and -pseudoversion
# and also disable -upgrades (given these are old versions)
gomodvet -prerelease=false -pseudoversion=false -upgrades=false

# gomodvet fails if we ask to check -pseudoversion. We pass -v in case we need to troubleshoot.
! gomodvet -prerelease=true -pseudoversion=false -upgrades=false
stdout 'gomodvet-006: a module is using a prerelease version: github.com/go-chi/chi v4.0.0-rc2\+incompatible'
! stdout 'a module is using a pseudoversion version'

# One module, using one prererelease (and one pseudoversion, which should not be flagged as a prerelease)

-- gopath/src/example.com/hello/go.mod --
module example.com/hello

require (
        github.com/go-chi/chi v4.0.0-rc2
        golang.org/x/net v0.0.0-20190110200230-915654e7eabc // indirect
)

-- gopath/src/example.com/hello/hello.go --

package hello

import (
	_ "github.com/go-chi/chi"
)


